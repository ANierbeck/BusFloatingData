{"Parameters": {"KeyName": {"Description": "Required: Specify your AWS EC2 Key Pair.", "Type": "AWS::EC2::KeyPair::KeyName"}, "AdminLocation": {"MaxLength": "18", "ConstraintDescription": "must be a valid CIDR.", "Default": "0.0.0.0/0", "Description": "Optional: Specify the IP range to whitelist for access to the admin zone. Must be a valid CIDR.", "AllowedPattern": "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$", "MinLength": "9", "Type": "String"}, "OAuthEnabled": {"Description": "\nEnable OAuth authentication", "AllowedValues": ["true", "false"], "Default": "true", "Type": "String"}, "SlaveInstanceCount": {"Description": "Required: Specify the number of private agent nodes or accept the default.", "Default": "5", "Type": "Number"}, "PublicSlaveInstanceCount": {"Description": "Required: Specify the number of public agent nodes or accept the default.", "Default": "1", "Type": "Number"}}, "Resources": {"PublicRouteTable": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::RouteTable"}, "PublicSlaveLoadBalancer": {"Properties": {"Subnets": [{"Ref": "PublicSubnet"}], "Listeners": [{"InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "InstancePort": "80", "Protocol": "HTTP"}, {"InstanceProtocol": "TCP", "LoadBalancerPort": "443", "InstancePort": "443", "Protocol": "TCP"}], "SecurityGroups": [{"Ref": "PublicSlaveSecurityGroup"}], "HealthCheck": {"Timeout": "2", "Target": "HTTP:9090/_haproxy_health_check", "HealthyThreshold": "2", "UnhealthyThreshold": "2", "Interval": "5"}}, "DependsOn": "GatewayToInternet", "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "PublicSubnet": {"Properties": {"CidrBlock": {"Fn::FindInMap": ["Parameters", "PublicSubnetRange", "default"]}, "Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::Subnet"}, "PrivateNetworkAcl": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::NetworkAcl"}, "DHCPOptions": {"Properties": {"DomainName": {"Fn::If": ["RegionIsUsEast1", "ec2.internal", {"Fn::Join": ["", [{"Ref": "AWS::Region"}, ".compute.internal"]]}]}, "DomainNameServers": ["AmazonProvidedDNS"]}, "Type": "AWS::EC2::DHCPOptions"}, "PublicSlaveIngressThree": {"Properties": {"ToPort": "65535", "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "5052"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateRoute": {"Properties": {"InstanceId": {"Ref": "NATInstance"}, "RouteTableId": {"Ref": "PrivateRouteTable"}, "DestinationCidrBlock": "0.0.0.0/0"}, "Type": "AWS::EC2::Route"}, "PublicSlaveIngressFive": {"Properties": {"ToPort": "5050", "CidrIp": "0.0.0.0/0", "IpProtocol": "udp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "23"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterToMasterIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "MasterSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PrivateSubnetNetworkAclAssociation": {"Properties": {"SubnetId": {"Ref": "PrivateSubnet"}, "NetworkAclId": {"Ref": "PrivateNetworkAcl"}}, "Type": "AWS::EC2::SubnetNetworkAclAssociation"}, "SlaveInstanceProfile": {"Properties": {"Roles": [{"Ref": "SlaveRole"}], "Path": "/"}, "Type": "AWS::IAM::InstanceProfile"}, "PrivateInboundNetworkAclEntry": {"Properties": {"CidrBlock": "0.0.0.0/0", "PortRange": {"From": "0", "To": "65535"}, "RuleAction": "allow", "RuleNumber": "100", "NetworkAclId": {"Ref": "PrivateNetworkAcl"}, "Protocol": "-1", "Egress": "false"}, "Type": "AWS::EC2::NetworkAclEntry"}, "InternalMasterLoadBalancer": {"Properties": {"Subnets": [{"Ref": "PublicSubnet"}], "Listeners": [{"InstanceProtocol": "HTTP", "LoadBalancerPort": "5050", "InstancePort": "5050", "Protocol": "HTTP"}, {"InstanceProtocol": "TCP", "LoadBalancerPort": "2181", "InstancePort": "2181", "Protocol": "TCP"}, {"InstanceProtocol": "HTTP", "LoadBalancerPort": "8181", "InstancePort": "8181", "Protocol": "HTTP"}, {"InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "InstancePort": "80", "Protocol": "HTTP"}, {"InstanceProtocol": "TCP", "LoadBalancerPort": "443", "InstancePort": "443", "Protocol": "TCP"}, {"InstanceProtocol": "HTTP", "LoadBalancerPort": "8080", "InstancePort": "8080", "Protocol": "HTTP"}], "Scheme": "internal", "SecurityGroups": [{"Ref": "LbSecurityGroup"}, {"Ref": "AdminSecurityGroup"}, {"Ref": "SlaveSecurityGroup"}, {"Ref": "PublicSlaveSecurityGroup"}, {"Ref": "MasterSecurityGroup"}], "HealthCheck": {"Timeout": "5", "Target": "HTTP:5050/health", "HealthyThreshold": "2", "UnhealthyThreshold": "2", "Interval": "30"}}, "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "SlaveToPublicSlaveIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveIngressFour": {"Properties": {"ToPort": "21", "CidrIp": "0.0.0.0/0", "IpProtocol": "udp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "InternetGateway": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}]}, "DependsOn": "Vpc", "Type": "AWS::EC2::InternetGateway"}, "LbSecurityGroup": {"Properties": {"GroupDescription": "Mesos Master LB", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "MasterInstanceProfile": {"Properties": {"Roles": [{"Ref": "MasterRole"}], "Path": "/"}, "Type": "AWS::IAM::InstanceProfile"}, "SlaveLaunchConfig": {"Properties": {"AssociatePublicIpAddress": "false", "ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "IamInstanceProfile": {"Ref": "SlaveInstanceProfile"}, "KeyName": {"Ref": "KeyName"}, "BlockDeviceMappings": [{"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"}], "InstanceType": {"Fn::FindInMap": ["Parameters", "SlaveInstanceType", "default"]}, "SecurityGroups": [{"Ref": "SlaveSecurityGroup"}], "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config\n", "\"coreos\":\n", "  \"units\":\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n", "      Before=var-lib.mount dbus.service\n", "      [Service]\n", "      Type=oneshot\n", "      RemainAfterExit=yes\n", "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n", "    \"name\": |-\n", "      format-var-lib-ephemeral.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=AWS Setup: Mount /var/lib\n", "      Before=dbus.service\n", "      [Mount]\n", "      What=/dev/xvdb\n", "      Where=/var/lib\n", "      Type=ext4\n", "    \"name\": |-\n", "      var-lib.mount\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      etcd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      update-engine.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      locksmithd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"name\": |-\n", "      systemd-resolved.service\n", "  - \"command\": |-\n", "      restart\n", "    \"name\": |-\n", "      systemd-journald.service\n", "  - \"command\": |-\n", "      restart\n", "    \"name\": |-\n", "      docker.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Before=dcos.target\n", "      [Service]\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", "    \"name\": |-\n", "      dcos-link-env.service\n", "  - \"content\": |\n", "      [Unit]\n", "      Description=Pkgpanda: Download DC/OS to this host.\n", "      After=network-online.target\n", "      Wants=network-online.target\n", "      ConditionPathExists=!/opt/mesosphere/\n", "      [Service]\n", "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", "    \"name\": |-\n", "      dcos-download.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=Pkgpanda: Specialize DC/OS for this host.\n", "      Requires=dcos-download.service\n", "      After=dcos-download.service\n", "      [Service]\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", "      [Install]\n", "      WantedBy=multi-user.target\n", "    \"enable\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      dcos-setup.service\n", "    \"no_block\": !!bool |-\n", "      true\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=AWS Setup: Signal CloudFormation Success\n", "      After=dcos.target\n", "      Requires=dcos.target\n", "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n", "      [Service]\n", "      Type=simple\n", "      Restart=on-failure\n", "      StartLimitInterval=0\n", "      RestartSec=15s\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n", "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=SlaveServerGroup\"\n", "      ExecStartPre=/bin/ping -c1 leader.mesos\n", "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n", "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n", "    \"name\": |-\n", "      dcos-cfn-signal.service\n", "  \"update\":\n", "    \"reboot-strategy\": |-\n", "      off\n", "\"write_files\":\n", "- \"content\": |\n", "    https://downloads.dcos.io/dcos/EarlyAccess\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/repository-url\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/bootstrap-id\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    [\"dcos-config--setup_b9372277c9fedaca077d7638e6e445af062d1d86\", \"dcos-metadata--setup_b9372277c9fedaca077d7638e6e445af062d1d86\"]\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/cluster-packages.json\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    [Journal]\n", "    MaxLevelConsole=warning\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/systemd/journald.conf.d/dcos.conf\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    MESOS_CLUSTER=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", "- \"content\": |\n", "    ADMINROUTER_ACTIVATE_AUTH_MODULE=", {"Ref": "OAuthEnabled"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n", "- \"content\": |\n", "    MASTER_SOURCE=exhibitor\n", "    EXHIBITOR_ADDRESS=", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "", "\n", "    RESOLVERS=169.254.169.253\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n", "- \"content\": |\n", "    EXHIBITOR_BACKEND=AWS_S3\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_S3_BUCKET=", {"Ref": "ExhibitorS3Bucket"}, "", "\n", "    AWS_S3_PREFIX=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", "- \"content\": |\n", "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n", "    \"authentication\":{\"enabled\":false},\n", "\n", "    \"oauth\":{\"enabled\":", {"Ref": "OAuthEnabled"}, ",\"authHost\":\"https://dcos.auth0.com\"},", "\n", "\n", "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n", "- \"content\": |\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_STACK_ID=", {"Ref": "AWS::StackId"}, "", "\n", "    AWS_STACK_NAME=", {"Ref": "AWS::StackName"}, "", "\n", "    AWS_IAM_MASTER_ROLE_NAME=", {"Ref": "MasterRole"}, "", "\n", "    AWS_IAM_SLAVE_ROLE_NAME=", {"Ref": "SlaveRole"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n", "- \"content\": |-\n", "    {}\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/slave\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws\n"]]}}}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "ExhibitorS3Bucket": {"DeletionPolicy": "Retain", "Type": "AWS::S3::Bucket"}, "InboundNetworkAclEntry": {"Properties": {"CidrBlock": "0.0.0.0/0", "PortRange": {"From": "0", "To": "65535"}, "RuleAction": "allow", "RuleNumber": "100", "NetworkAclId": {"Ref": "PublicNetworkAcl"}, "Protocol": "-1", "Egress": "false"}, "Type": "AWS::EC2::NetworkAclEntry"}, "AdminSecurityGroup": {"Properties": {"GroupDescription": "Enable admin access to servers", "SecurityGroupIngress": [{"ToPort": "22", "CidrIp": {"Ref": "AdminLocation"}, "IpProtocol": "tcp", "FromPort": "22"}, {"ToPort": "80", "CidrIp": {"Ref": "AdminLocation"}, "IpProtocol": "tcp", "FromPort": "80"}, {"ToPort": "443", "CidrIp": {"Ref": "AdminLocation"}, "IpProtocol": "tcp", "FromPort": "443"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "SlaveToMasterIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "MasterSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterRole": {"Properties": {"Path": "/", "Policies": [{"PolicyName": "root", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Resource": [{"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ExhibitorS3Bucket"}, "/*"]]}, {"Fn::Join": ["", ["arn:aws:s3:::", {"Ref": "ExhibitorS3Bucket"}]]}], "Action": ["s3:AbortMultipartUpload", "s3:DeleteObject", "s3:GetBucketAcl", "s3:GetBucketPolicy", "s3:GetObject", "s3:GetObjectAcl", "s3:ListBucket", "s3:ListBucketMultipartUploads", "s3:ListMultipartUploadParts", "s3:PutObject", "s3:PutObjectAcl"]}, {"Effect": "Allow", "Action": ["cloudformation:*"], "Resource": [{"Ref": "AWS::StackId"}, {"Fn::Join": ["", [{"Ref": "AWS::StackId"}, "/*"]]}]}, {"Effect": "Allow", "Action": ["ec2:DescribeKeyPairs", "ec2:DescribeSubnets", "autoscaling:DescribeLaunchConfigurations", "autoscaling:UpdateAutoScalingGroup", "autoscaling:DescribeAutoScalingGroups", "autoscaling:DescribeScalingActivities", "elasticloadbalancing:DescribeLoadBalancers"], "Resource": "*"}]}}], "AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["sts:AssumeRole"], "Principal": {"Service": ["ec2.amazonaws.com"]}}]}}, "Type": "AWS::IAM::Role"}, "PublicSlaveSecurityGroup": {"Properties": {"GroupDescription": "Mesos Slaves Public", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "PublicSlaveIngressOne": {"Properties": {"ToPort": "21", "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "Vpc": {"Properties": {"CidrBlock": {"Fn::FindInMap": ["Parameters", "VPCSubnetRange", "default"]}, "Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "EnableDnsHostnames": "true", "EnableDnsSupport": "true"}, "Type": "AWS::EC2::VPC"}, "SlaveRole": {"Properties": {"Policies": [{"PolicyName": "Slaves", "PolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["cloudformation:*"], "Resource": [{"Ref": "AWS::StackId"}, {"Fn::Join": ["", [{"Ref": "AWS::StackId"}, "/*"]]}]}, {"Effect": "Allow", "Action": ["ec2:CreateTags", "ec2:DescribeInstances", "ec2:CreateVolume", "ec2:DeleteVolume", "ec2:AttachVolume", "ec2:DetachVolume", "ec2:DescribeVolumes", "ec2:DescribeVolumeStatus", "ec2:DescribeVolumeAttribute", "ec2:CreateSnapshot", "ec2:CopySnapshot", "ec2:DeleteSnapshot", "ec2:DescribeSnapshots", "ec2:DescribeSnapshotAttribute"], "Resource": "*"}]}}], "AssumeRolePolicyDocument": {"Version": "2012-10-17", "Statement": [{"Effect": "Allow", "Action": ["sts:AssumeRole"], "Principal": {"Service": ["ec2.amazonaws.com"]}}]}}, "Type": "AWS::IAM::Role"}, "PublicSlaveIngressTwo": {"Properties": {"ToPort": "5050", "CidrIp": "0.0.0.0/0", "IpProtocol": "tcp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "23"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicNetworkAcl": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::NetworkAcl"}, "PublicSubnetNetworkAclAssociation": {"Properties": {"SubnetId": {"Ref": "PublicSubnet"}, "NetworkAclId": {"Ref": "PublicNetworkAcl"}}, "Type": "AWS::EC2::SubnetNetworkAclAssociation"}, "PublicSlaveToMasterIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "MasterSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveIngressSix": {"Properties": {"ToPort": "65535", "CidrIp": "0.0.0.0/0", "IpProtocol": "udp", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "5052"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicRoute": {"Properties": {"RouteTableId": {"Ref": "PublicRouteTable"}, "DestinationCidrBlock": "0.0.0.0/0", "GatewayId": {"Ref": "InternetGateway"}}, "DependsOn": "GatewayToInternet", "Type": "AWS::EC2::Route"}, "PrivateSubnet": {"Properties": {"CidrBlock": {"Fn::FindInMap": ["Parameters", "PrivateSubnetRange", "default"]}, "Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Private", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::Subnet"}, "MasterToPublicSlaveIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "SlaveToSlaveIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "SlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterSecurityGroup": {"Properties": {"GroupDescription": "Mesos Masters", "SecurityGroupIngress": [{"ToPort": "5050", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "5050"}, {"ToPort": "80", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "80"}, {"ToPort": "8080", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8080"}, {"ToPort": "8181", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "8181"}, {"ToPort": "2181", "SourceSecurityGroupId": {"Ref": "LbSecurityGroup"}, "IpProtocol": "tcp", "FromPort": "2181"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "ElasticLoadBalancer": {"Properties": {"Subnets": [{"Ref": "PublicSubnet"}], "Listeners": [{"InstanceProtocol": "HTTP", "LoadBalancerPort": "80", "InstancePort": "80", "Protocol": "HTTP"}, {"InstanceProtocol": "TCP", "LoadBalancerPort": "443", "InstancePort": "443", "Protocol": "TCP"}], "SecurityGroups": [{"Ref": "LbSecurityGroup"}, {"Ref": "AdminSecurityGroup"}], "HealthCheck": {"Timeout": "5", "Target": "HTTP:5050/health", "HealthyThreshold": "2", "UnhealthyThreshold": "2", "Interval": "30"}}, "DependsOn": "GatewayToInternet", "Type": "AWS::ElasticLoadBalancing::LoadBalancer"}, "PublicSlaveToPublicSlaveIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "PublicSlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterLaunchConfig": {"Properties": {"AssociatePublicIpAddress": "true", "ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "IamInstanceProfile": {"Ref": "MasterInstanceProfile"}, "KeyName": {"Ref": "KeyName"}, "BlockDeviceMappings": [{"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"}], "InstanceType": {"Fn::FindInMap": ["Parameters", "MasterInstanceType", "default"]}, "SecurityGroups": [{"Ref": "MasterSecurityGroup"}, {"Ref": "AdminSecurityGroup"}], "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config\n", "\"coreos\":\n", "  \"units\":\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n", "      Before=var-lib.mount dbus.service\n", "      [Service]\n", "      Type=oneshot\n", "      RemainAfterExit=yes\n", "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n", "    \"name\": |-\n", "      format-var-lib-ephemeral.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=AWS Setup: Mount /var/lib\n", "      Before=dbus.service\n", "      [Mount]\n", "      What=/dev/xvdb\n", "      Where=/var/lib\n", "      Type=ext4\n", "    \"name\": |-\n", "      var-lib.mount\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      etcd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      update-engine.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      locksmithd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"name\": |-\n", "      systemd-resolved.service\n", "  - \"command\": |-\n", "      restart\n", "    \"name\": |-\n", "      systemd-journald.service\n", "  - \"command\": |-\n", "      restart\n", "    \"name\": |-\n", "      docker.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Before=dcos.target\n", "      [Service]\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", "    \"name\": |-\n", "      dcos-link-env.service\n", "  - \"content\": |\n", "      [Unit]\n", "      Description=Pkgpanda: Download DC/OS to this host.\n", "      After=network-online.target\n", "      Wants=network-online.target\n", "      ConditionPathExists=!/opt/mesosphere/\n", "      [Service]\n", "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", "    \"name\": |-\n", "      dcos-download.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=Pkgpanda: Specialize DC/OS for this host.\n", "      Requires=dcos-download.service\n", "      After=dcos-download.service\n", "      [Service]\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", "      [Install]\n", "      WantedBy=multi-user.target\n", "    \"enable\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      dcos-setup.service\n", "    \"no_block\": !!bool |-\n", "      true\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=AWS Setup: Signal CloudFormation Success\n", "      After=dcos.target\n", "      Requires=dcos.target\n", "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n", "      [Service]\n", "      Type=simple\n", "      Restart=on-failure\n", "      StartLimitInterval=0\n", "      RestartSec=15s\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n", "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=MasterServerGroup\"\n", "      ExecStartPre=/bin/ping -c1 leader.mesos\n", "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n", "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n", "    \"name\": |-\n", "      dcos-cfn-signal.service\n", "  \"update\":\n", "    \"reboot-strategy\": |-\n", "      off\n", "\"write_files\":\n", "- \"content\": |\n", "    https://downloads.dcos.io/dcos/EarlyAccess\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/repository-url\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/bootstrap-id\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    [\"dcos-config--setup_b9372277c9fedaca077d7638e6e445af062d1d86\", \"dcos-metadata--setup_b9372277c9fedaca077d7638e6e445af062d1d86\"]\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/cluster-packages.json\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    [Journal]\n", "    MaxLevelConsole=warning\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/systemd/journald.conf.d/dcos.conf\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    MESOS_CLUSTER=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", "- \"content\": |\n", "    ADMINROUTER_ACTIVATE_AUTH_MODULE=", {"Ref": "OAuthEnabled"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n", "- \"content\": |\n", "    MASTER_SOURCE=exhibitor\n", "    EXHIBITOR_ADDRESS=", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "", "\n", "    RESOLVERS=169.254.169.253\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n", "- \"content\": |\n", "    EXHIBITOR_BACKEND=AWS_S3\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_S3_BUCKET=", {"Ref": "ExhibitorS3Bucket"}, "", "\n", "    AWS_S3_PREFIX=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", "- \"content\": |\n", "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n", "    \"authentication\":{\"enabled\":false},\n", "\n", "    \"oauth\":{\"enabled\":", {"Ref": "OAuthEnabled"}, ",\"authHost\":\"https://dcos.auth0.com\"},", "\n", "\n", "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n", "- \"content\": |\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_STACK_ID=", {"Ref": "AWS::StackId"}, "", "\n", "    AWS_STACK_NAME=", {"Ref": "AWS::StackName"}, "", "\n", "    AWS_IAM_MASTER_ROLE_NAME=", {"Ref": "MasterRole"}, "", "\n", "    AWS_IAM_SLAVE_ROLE_NAME=", {"Ref": "SlaveRole"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n", "- \"content\": |-\n", "    {}\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/master\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws_master\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws\n"]]}}}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "MasterServerGroup": {"CreationPolicy": {"ResourceSignal": {"Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}, "Count": 3}}, "Properties": {"LaunchConfigurationName": {"Ref": "MasterLaunchConfig"}, "VPCZoneIdentifier": [{"Ref": "PublicSubnet"}], "DesiredCapacity": 3, "AvailabilityZones": [{"Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]}], "MinSize": 3, "MaxSize": 3, "LoadBalancerNames": [{"Ref": "ElasticLoadBalancer"}, {"Ref": "InternalMasterLoadBalancer"}], "Tags": [{"Value": "mesos-master", "Key": "role", "PropagateAtLaunch": "true"}]}, "DependsOn": "GatewayToInternet", "Type": "AWS::AutoScaling::AutoScalingGroup"}, "SlaveToMasterLBIngress": {"Properties": {"ToPort": "2181", "SourceSecurityGroupId": {"Ref": "SlaveSecurityGroup"}, "IpProtocol": "tcp", "GroupId": {"Ref": "LbSecurityGroup"}, "FromPort": "2181"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "GatewayToInternet": {"Properties": {"InternetGatewayId": {"Ref": "InternetGateway"}, "VpcId": {"Ref": "Vpc"}}, "DependsOn": "InternetGateway", "Type": "AWS::EC2::VPCGatewayAttachment"}, "PublicSubnetRouteTableAssociation": {"Properties": {"SubnetId": {"Ref": "PublicSubnet"}, "RouteTableId": {"Ref": "PublicRouteTable"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}, "PublicSlaveServerGroup": {"CreationPolicy": {"ResourceSignal": {"Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}, "Count": {"Ref": "PublicSlaveInstanceCount"}}}, "Properties": {"LaunchConfigurationName": {"Ref": "PublicSlaveLaunchConfig"}, "VPCZoneIdentifier": [{"Ref": "PublicSubnet"}], "DesiredCapacity": {"Ref": "PublicSlaveInstanceCount"}, "AvailabilityZones": [{"Fn::GetAtt": ["PublicSubnet", "AvailabilityZone"]}], "MinSize": {"Ref": "PublicSlaveInstanceCount"}, "MaxSize": {"Ref": "PublicSlaveInstanceCount"}, "LoadBalancerNames": [{"Ref": "PublicSlaveLoadBalancer"}], "Tags": [{"Value": "mesos-slave", "Key": "role", "PropagateAtLaunch": "true"}]}, "DependsOn": "GatewayToInternet", "Type": "AWS::AutoScaling::AutoScalingGroup"}, "OutboundNetworkAclEntry": {"Properties": {"CidrBlock": "0.0.0.0/0", "PortRange": {"From": "0", "To": "65535"}, "RuleAction": "allow", "RuleNumber": "100", "NetworkAclId": {"Ref": "PublicNetworkAcl"}, "Protocol": "-1", "Egress": "true"}, "Type": "AWS::EC2::NetworkAclEntry"}, "PrivateRouteTable": {"Properties": {"Tags": [{"Value": {"Ref": "AWS::StackName"}, "Key": "Application"}, {"Value": "Public", "Key": "Network"}], "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::RouteTable"}, "NATInstance": {"Properties": {"KeyName": {"Ref": "KeyName"}, "ImageId": {"Fn::FindInMap": ["NATAmi", {"Ref": "AWS::Region"}, "default"]}, "NetworkInterfaces": [{"GroupSet": [{"Ref": "SlaveSecurityGroup"}, {"Ref": "MasterSecurityGroup"}, {"Ref": "AdminSecurityGroup"}], "AssociatePublicIpAddress": "true", "SubnetId": {"Ref": "PublicSubnet"}, "DeviceIndex": "0", "DeleteOnTermination": "true"}], "InstanceType": "m3.medium", "SourceDestCheck": "false"}, "DependsOn": "GatewayToInternet", "Type": "AWS::EC2::Instance"}, "PrivateOutboundNetworkAclEntry": {"Properties": {"CidrBlock": "0.0.0.0/0", "PortRange": {"From": "0", "To": "65535"}, "RuleAction": "allow", "RuleNumber": "100", "NetworkAclId": {"Ref": "PrivateNetworkAcl"}, "Protocol": "-1", "Egress": "true"}, "Type": "AWS::EC2::NetworkAclEntry"}, "SlaveSecurityGroup": {"Properties": {"GroupDescription": "Mesos Slaves", "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::SecurityGroup"}, "SlaveServerGroup": {"CreationPolicy": {"ResourceSignal": {"Timeout": {"Fn::FindInMap": ["Parameters", "StackCreationTimeout", "default"]}, "Count": {"Ref": "SlaveInstanceCount"}}}, "Properties": {"LaunchConfigurationName": {"Ref": "SlaveLaunchConfig"}, "VPCZoneIdentifier": [{"Ref": "PrivateSubnet"}], "DesiredCapacity": {"Ref": "SlaveInstanceCount"}, "AvailabilityZones": [{"Fn::GetAtt": ["PrivateSubnet", "AvailabilityZone"]}], "MinSize": {"Ref": "SlaveInstanceCount"}, "MaxSize": {"Ref": "SlaveInstanceCount"}, "Tags": [{"Value": "mesos-slave", "Key": "role", "PropagateAtLaunch": "true"}]}, "DependsOn": "GatewayToInternet", "Type": "AWS::AutoScaling::AutoScalingGroup"}, "PublicSlaveToSlaveIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "PublicSlaveSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "SlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "MasterToSlaveIngress": {"Properties": {"ToPort": "65535", "SourceSecurityGroupId": {"Ref": "MasterSecurityGroup"}, "IpProtocol": "-1", "GroupId": {"Ref": "SlaveSecurityGroup"}, "FromPort": "0"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "PublicSlaveLaunchConfig": {"Properties": {"AssociatePublicIpAddress": "true", "ImageId": {"Fn::FindInMap": ["RegionToAmi", {"Ref": "AWS::Region"}, "stable"]}, "IamInstanceProfile": {"Ref": "SlaveInstanceProfile"}, "KeyName": {"Ref": "KeyName"}, "BlockDeviceMappings": [{"DeviceName": "/dev/sdb", "VirtualName": "ephemeral0"}], "InstanceType": {"Fn::FindInMap": ["Parameters", "PublicSlaveInstanceType", "default"]}, "SecurityGroups": [{"Ref": "PublicSlaveSecurityGroup"}], "UserData": {"Fn::Base64": {"Fn::Join": ["", ["#cloud-config\n", "\"coreos\":\n", "  \"units\":\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=AWS Setup: Formats the /var/lib ephemeral drive\n", "      Before=var-lib.mount dbus.service\n", "      [Service]\n", "      Type=oneshot\n", "      RemainAfterExit=yes\n", "      ExecStart=/bin/bash -c \"(blkid -t TYPE=ext4 | grep xvdb) || (/usr/sbin/mkfs.ext4 -F /dev/xvdb)\"\n", "    \"name\": |-\n", "      format-var-lib-ephemeral.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=AWS Setup: Mount /var/lib\n", "      Before=dbus.service\n", "      [Mount]\n", "      What=/dev/xvdb\n", "      Where=/var/lib\n", "      Type=ext4\n", "    \"name\": |-\n", "      var-lib.mount\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      etcd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      update-engine.service\n", "  - \"command\": |-\n", "      stop\n", "    \"mask\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      locksmithd.service\n", "  - \"command\": |-\n", "      stop\n", "    \"name\": |-\n", "      systemd-resolved.service\n", "  - \"command\": |-\n", "      restart\n", "    \"name\": |-\n", "      systemd-journald.service\n", "  - \"command\": |-\n", "      restart\n", "    \"name\": |-\n", "      docker.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Before=dcos.target\n", "      [Service]\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      ExecStartPre=/usr/bin/mkdir -p /etc/profile.d\n", "      ExecStart=/usr/bin/ln -sf /opt/mesosphere/environment.export /etc/profile.d/dcos.sh\n", "    \"name\": |-\n", "      dcos-link-env.service\n", "  - \"content\": |\n", "      [Unit]\n", "      Description=Pkgpanda: Download DC/OS to this host.\n", "      After=network-online.target\n", "      Wants=network-online.target\n", "      ConditionPathExists=!/opt/mesosphere/\n", "      [Service]\n", "      EnvironmentFile=/etc/mesosphere/setup-flags/bootstrap-id\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      ExecStartPre=/usr/bin/curl -fLsSv --retry 20 -Y 100000 -y 60 -o /tmp/bootstrap.tar.xz https://downloads.dcos.io/dcos/EarlyAccess/bootstrap/${BOOTSTRAP_ID}.bootstrap.tar.xz\n", "      ExecStartPre=/usr/bin/mkdir -p /opt/mesosphere\n", "      ExecStart=/usr/bin/tar -axf /tmp/bootstrap.tar.xz -C /opt/mesosphere\n", "      ExecStartPost=-/usr/bin/rm -f /tmp/bootstrap.tar.xz\n", "    \"name\": |-\n", "      dcos-download.service\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |\n", "      [Unit]\n", "      Description=Pkgpanda: Specialize DC/OS for this host.\n", "      Requires=dcos-download.service\n", "      After=dcos-download.service\n", "      [Service]\n", "      Type=oneshot\n", "      StandardOutput=journal+console\n", "      StandardError=journal+console\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      ExecStart=/opt/mesosphere/bin/pkgpanda setup --no-block-systemd\n", "      [Install]\n", "      WantedBy=multi-user.target\n", "    \"enable\": !!bool |-\n", "      true\n", "    \"name\": |-\n", "      dcos-setup.service\n", "    \"no_block\": !!bool |-\n", "      true\n", "  - \"command\": |-\n", "      start\n", "    \"content\": |-\n", "      [Unit]\n", "      Description=AWS Setup: Signal CloudFormation Success\n", "      After=dcos.target\n", "      Requires=dcos.target\n", "      ConditionPathExists=!/var/lib/dcos-cfn-signal\n", "      [Service]\n", "      Type=simple\n", "      Restart=on-failure\n", "      StartLimitInterval=0\n", "      RestartSec=15s\n", "      EnvironmentFile=/opt/mesosphere/environment\n", "      EnvironmentFile=/opt/mesosphere/etc/cfn_signal_metadata\n", "      Environment=\"AWS_CFN_SIGNAL_THIS_RESOURCE=PublicSlaveServerGroup\"\n", "      ExecStartPre=/bin/ping -c1 leader.mesos\n", "      ExecStartPre=/opt/mesosphere/bin/cfn-signal\n", "      ExecStart=/usr/bin/touch /var/lib/dcos-cfn-signal\n", "    \"name\": |-\n", "      dcos-cfn-signal.service\n", "  \"update\":\n", "    \"reboot-strategy\": |-\n", "      off\n", "\"write_files\":\n", "- \"content\": |\n", "    https://downloads.dcos.io/dcos/EarlyAccess\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/repository-url\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    BOOTSTRAP_ID=3a2b7e03c45cd615da8dfb1b103943894652cd71\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/bootstrap-id\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    [\"dcos-config--setup_b9372277c9fedaca077d7638e6e445af062d1d86\", \"dcos-metadata--setup_b9372277c9fedaca077d7638e6e445af062d1d86\"]\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-flags/cluster-packages.json\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    [Journal]\n", "    MaxLevelConsole=warning\n", "  \"owner\": |-\n", "    root\n", "  \"path\": |-\n", "    /etc/systemd/journald.conf.d/dcos.conf\n", "  \"permissions\": |-\n", "    0644\n", "- \"content\": |\n", "    MESOS_CLUSTER=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/mesos-master-provider\n", "- \"content\": |\n", "    ADMINROUTER_ACTIVATE_AUTH_MODULE=", {"Ref": "OAuthEnabled"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/adminrouter.env\n", "- \"content\": |\n", "    MASTER_SOURCE=exhibitor\n", "    EXHIBITOR_ADDRESS=", {"Fn::GetAtt": ["InternalMasterLoadBalancer", "DNSName"]}, "", "\n", "    RESOLVERS=169.254.169.253\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/dns_config\n", "- \"content\": |\n", "    EXHIBITOR_BACKEND=AWS_S3\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_S3_BUCKET=", {"Ref": "ExhibitorS3Bucket"}, "", "\n", "    AWS_S3_PREFIX=", {"Ref": "AWS::StackName"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/exhibitor\n", "- \"content\": |\n", "    {\"uiConfiguration\":{\"plugins\":{\"banner\":{\"enabled\":false,\"backgroundColor\":\"#1E232F\",\"foregroundColor\":\"#FFFFFF\",\"headerTitle\":null,\"headerContent\":null,\"footerContent\":null,\"imagePath\":null,\"dismissible\":null},\"branding\":{\"enabled\":false},\"external-links\": {\"enabled\": false},\n", "    \"authentication\":{\"enabled\":false},\n", "\n", "    \"oauth\":{\"enabled\":", {"Ref": "OAuthEnabled"}, ",\"authHost\":\"https://dcos.auth0.com\"},", "\n", "\n", "    \"networking\":{\"enabled\":false},\"organization\":{\"enabled\":false},\"tracking\":{\"enabled\":true}}}}\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/ui-config.json\n", "- \"content\": |\n", "    AWS_REGION=", {"Ref": "AWS::Region"}, "", "\n", "    AWS_STACK_ID=", {"Ref": "AWS::StackId"}, "", "\n", "    AWS_STACK_NAME=", {"Ref": "AWS::StackName"}, "", "\n", "    AWS_IAM_MASTER_ROLE_NAME=", {"Ref": "MasterRole"}, "", "\n", "    AWS_IAM_SLAVE_ROLE_NAME=", {"Ref": "SlaveRole"}, "", "\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/etc/cfn_signal_metadata\n", "- \"content\": |-\n", "    {}\n", "  \"path\": |-\n", "    /etc/mesosphere/setup-packages/dcos-provider-aws--setup/pkginfo.json\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/slave_public\n", "- \"content\": \"\"\n", "  \"path\": |-\n", "    /etc/mesosphere/roles/aws\n"]]}}}, "Type": "AWS::AutoScaling::LaunchConfiguration"}, "VPCDHCPOptionsAssociation": {"Properties": {"DhcpOptionsId": {"Ref": "DHCPOptions"}, "VpcId": {"Ref": "Vpc"}}, "Type": "AWS::EC2::VPCDHCPOptionsAssociation"}, "PrivateSubnetRouteTableAssociation": {"Properties": {"SubnetId": {"Ref": "PrivateSubnet"}, "RouteTableId": {"Ref": "PrivateRouteTable"}}, "Type": "AWS::EC2::SubnetRouteTableAssociation"}}, "Conditions": {"RegionIsUsEast1": {"Fn::Equals": [{"Ref": "AWS::Region"}, "us-east-1"]}}, "Outputs": {"DnsAddress": {"Description": "Mesos Master", "Value": {"Fn::GetAtt": ["ElasticLoadBalancer", "DNSName"]}}, "PublicSlaveDnsAddress": {"Description": "Public slaves", "Value": {"Fn::GetAtt": ["PublicSlaveLoadBalancer", "DNSName"]}}}, "AWSTemplateFormatVersion": "2010-09-09", "Description": "DC/OS AWS CloudFormation Template", "Mappings": {"NATAmi": {"sa-east-1": {"default": "ami-b972dba4"}, "eu-west-1": {"default": "ami-3760b040"}, "us-east-1": {"default": "ami-4c9e4b24"}, "ap-northeast-1": {"default": "ami-55c29e54"}, "eu-central-1": {"default": "ami-204c7a3d"}, "us-west-2": {"default": "ami-bb69128b"}, "ap-southeast-2": {"default": "ami-996402a3"}, "ap-southeast-1": {"default": "ami-b082dae2"}, "us-west-1": {"default": "ami-2b2b296e"}}, "RegionToAmi": {"sa-east-1": {"stable": "ami-154af179"}, "eu-west-1": {"stable": "ami-55d20b26"}, "us-east-1": {"stable": "ami-37bdc15d"}, "ap-northeast-1": {"stable": "ami-84e0c7ea"}, "eu-central-1": {"stable": "ami-fdd4c791"}, "us-west-2": {"stable": "ami-00ebfc61"}, "ap-southeast-2": {"stable": "ami-f35b0590"}, "ap-southeast-1": {"stable": "ami-da67a0b9"}, "us-gov-west-1": {"stable": "ami-05bc0164"}, "us-west-1": {"stable": "ami-27553a47"}}, "Parameters": {"StackCreationTimeout": {"default": "PT45M"}, "MasterInstanceType": {"default": "m3.xlarge"}, "PrivateSubnetRange": {"default": "10.0.0.0/22"}, "PublicSubnetRange": {"default": "10.0.4.0/22"}, "PublicSlaveInstanceType": {"default": "m3.xlarge"}, "VPCSubnetRange": {"default": "10.0.0.0/16"}, "SlaveInstanceType": {"default": "m3.xlarge"}}}, "Metadata": {"TemplateGenerationDate": "2016-04-19 09:27:40.981039", "DcosImageCommit": "14509fe1e7899f439527fb39867194c7a425c771"}}